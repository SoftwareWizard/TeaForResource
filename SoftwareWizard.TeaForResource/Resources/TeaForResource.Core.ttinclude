<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="mscorlib" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Concurrent" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading" #>
<#
    WriteLine("// ------------------------------------------------------------------------------------------------");
    WriteLine("// This code was generated by TeaForResource");
    WriteLine("// Created by Software Wizard");
    WriteLine("//");
    WriteLine("// Do not make changes directly to this file - edit the template instead.");
    WriteLine("// ------------------------------------------------------------------------------------------------");
#>
<#+    // Setting Declarations - edit these in the main <name>.tt file *******************************************************************************
    string DefaultLanguageCode = string.Empty;

    string StaticResourceNamespaceName = string.Empty;
    string ResourcePath = string.Empty;

    string TextResourceModuleName = string.Empty;
    string TextResourceClassName = string.Empty;

    // Private variables / constants

#>
<#+    // ResourceReader *********************************************************************************************************************
    public IList<Resource> ReadResources(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            throw new ArgumentException("Path is Empty");
        }

        var directoryInfo = new DirectoryInfo(path);
        var resourceFilenameSearchPattern = "*.resx";
        var resourceGroups = directoryInfo.EnumerateFiles(resourceFilenameSearchPattern, SearchOption.AllDirectories)
            .Select(item => new {File = item, Tokens = Path.GetFileNameWithoutExtension(item.FullName).Split('.')})
            .Select(item => new {item.File, Name = item.Tokens[0], LanguageCode = GetLanguageCode(item.Tokens.Skip(1))})
            .GroupBy(item => item.Name, item => new { item.File, item.LanguageCode})
            .ToDictionary(item => item.Key, item => item.OrderBy(x => x.LanguageCode).ToList());

        var resources = new List<Resource>();
        foreach (var resourceGroup in resourceGroups)
        {
            var resourceElements = new BlockingCollection<ResourceElement>();
            var resource = new Resource {Name = resourceGroup.Key, ResourceElements = resourceElements};

            foreach (var resourceGroupItem in resourceGroup.Value.AsParallel())
            {
                var xml = XDocument.Load(resourceGroupItem.File.OpenText());
                var dataNodes = xml.Root.Elements("data");

                foreach (var dataNode in dataNodes)
                {
                    var nameAttribute = dataNode.Attribute("name");
                    var valueNode = dataNode.Element("value");
                    var commentNode = dataNode.Element("comment");

                    var resourceElement = new ResourceElement
                        {
                            LanguageCode = resourceGroupItem.LanguageCode,
                            ResourceKey = nameAttribute != null ? nameAttribute.Value : null,
                            Text = valueNode != null ? valueNode.Value : null,
                            Comment = commentNode != null ? commentNode.Value : null
                            };

                    resourceElements.Add(resourceElement);
                }
            }
            
            resources.Add(resource);
        }

        return resources;
    }

    private string GetLanguageCode(IEnumerable<string> tokens)
    {
        var languageCode = string.Join(".", tokens);
        return !string.IsNullOrEmpty(languageCode) 
            ? languageCode  
            : DefaultLanguageCode;
    }
#>
<#+    public class Resource
    {
        public string Name { get; set; }

        public BlockingCollection<ResourceElement> ResourceElements { get; set; }
    }
#>
<#+    public class ResourceElement
    {
        public string ResourceKey { get; set; }
        public string LanguageCode { get; set; }
        public string Text { get; set; }
        public string Comment { get; set; }
    }
#>





