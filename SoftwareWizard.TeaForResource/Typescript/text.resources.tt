<#@ include file="..\Resources\TeaForResource.Core.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".generated.ts" #>
<#
    // Please make changes to the settings below.
    // All you have to do is save this file, and the output file(s) is/are generated.
    // or Select "Run Custom Tool" from File Context Menu
    // or Select "Transform all T4 Templates" from VS Build Menu.
    // Compiling does not regenerate the file(s)!
    // Hint: Before modifing the template install T4 Editor Plugin for VS from Devart and ForTea Resharper Plugin. Have more fun.
    
    // Main settings **********************************************************************************************************************
    ResourcePath = @"..\Resources";
    TextResourceModuleName = "App";
    TextResourceClassName = "TextResources";
    
    // ##########################################################################################################################
#>
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
<# 
    var path = Host.ResolvePath(ResourcePath);
    var resources = ReadResources(path);
    if (!resources.Any())
    {
        Warning("No Resources found");
    }
#>

module <#= TextResourceModuleName #>
{
	export interface I<#= TextResourceClassName #> {
<#    foreach (var resource in resources) { #>
		<#= ToLowerCamelCase(resource.Name) #> : <#= resource.Name #>;
<#    } #>
	}

	export class <#= TextResourceClassName #> implements I<#= TextResourceClassName #> {
<#    foreach (var resource in resources) { #>
		<#= ToLowerCamelCase(resource.Name) #> : <#= resource.Name #>;
<#    } #>

	    constructor() {
<#    foreach (var resource in resources) { #>
	        this.<#= ToLowerCamelCase(resource.Name) #> = new <#= resource.Name #>();
<#    } #>
		}
	}

<#    foreach (var resource in resources) {
        var resourceKeys = resource.ResourceElements
            .Where(item => item.LanguageCode == DefaultLanguageCode)
            .Select(item => item.ResourceKey)
            .ToList();
#>
	export class <#= resource.Name #> {
<#        foreach (var resourceKey in resourceKeys) { #>
		public <#= ToLowerCamelCase(resourceKey) #>: string = "<#= ToLowerCamelCase(resource.Name) #>.<#= ToLowerCamelCase(resourceKey) #>";
<#        } #>
    }    

<#    } #>
}
// </auto-generated>
<#+
    // --------- Internal Methods -----------------------------------------------------------------------
    private static string ToLowerCamelCase(string name)
    {
        return !string.IsNullOrEmpty(name) 
            ? $"{name[0].ToString().ToLowerInvariant()}{name.Substring(1)}" 
            : name;
    }
#>
